[{"C:\\Users\\dinop\\Documents\\GitHub\\react-inlamningsuppgift\\src\\index.js":"1","C:\\Users\\dinop\\Documents\\GitHub\\react-inlamningsuppgift\\src\\reportWebVitals.js":"2","C:\\Users\\dinop\\Documents\\GitHub\\react-inlamningsuppgift\\src\\App.js":"3","C:\\Users\\dinop\\Documents\\GitHub\\react-inlamningsuppgift\\src\\pages\\LoginPage.jsx":"4","C:\\Users\\dinop\\Documents\\GitHub\\react-inlamningsuppgift\\src\\components\\CustomerListItem.jsx":"5","C:\\Users\\dinop\\Documents\\GitHub\\react-inlamningsuppgift\\src\\pages\\CustomerDetailPage.jsx":"6","C:\\Users\\dinop\\Documents\\GitHub\\react-inlamningsuppgift\\src\\pages\\CustomerCreatePage.jsx":"7","C:\\Users\\dinop\\Documents\\GitHub\\react-inlamningsuppgift\\src\\pages\\CustomerUpdatePage.jsx":"8","C:\\Users\\dinop\\Documents\\GitHub\\react-inlamningsuppgift\\src\\pages\\HomePage.jsx":"9","C:\\Users\\dinop\\Documents\\GitHub\\react-inlamningsuppgift\\src\\contexts\\UserContext.js":"10","C:\\Users\\dinop\\Documents\\GitHub\\react-inlamningsuppgift\\src\\data\\FetchKit.js":"11","C:\\Users\\dinop\\Documents\\GitHub\\react-inlamningsuppgift\\src\\data\\fetchKit.js":"12","C:\\Users\\dinop\\Documents\\GitHub\\react-inlamningsuppgift\\src\\pages\\ProfilePage.jsx":"13"},{"size":636,"mtime":1610726631153,"results":"14","hashOfConfig":"15"},{"size":362,"mtime":499162500000,"results":"16","hashOfConfig":"15"},{"size":3847,"mtime":1610759593725,"results":"17","hashOfConfig":"15"},{"size":2050,"mtime":1610752756601,"results":"18","hashOfConfig":"15"},{"size":348,"mtime":1610390514611,"results":"19","hashOfConfig":"15"},{"size":3927,"mtime":1610749215447,"results":"20","hashOfConfig":"15"},{"size":1736,"mtime":1610734017946,"results":"21","hashOfConfig":"15"},{"size":2030,"mtime":1610749318574,"results":"22","hashOfConfig":"15"},{"size":1094,"mtime":1610753272965,"results":"23","hashOfConfig":"15"},{"size":83,"mtime":1610593002357,"results":"24","hashOfConfig":"15"},{"size":1959,"mtime":1610572554392,"results":"25","hashOfConfig":"15"},{"size":2663,"mtime":1610748311827,"results":"26","hashOfConfig":"15"},{"size":770,"mtime":1610747717027,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"18xjips",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"30"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"30"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"30"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"30"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"53","messages":"54","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"C:\\Users\\dinop\\Documents\\GitHub\\react-inlamningsuppgift\\src\\index.js",[],["59","60"],"C:\\Users\\dinop\\Documents\\GitHub\\react-inlamningsuppgift\\src\\reportWebVitals.js",[],"C:\\Users\\dinop\\Documents\\GitHub\\react-inlamningsuppgift\\src\\App.js",["61","62"],"C:\\Users\\dinop\\Documents\\GitHub\\react-inlamningsuppgift\\src\\pages\\LoginPage.jsx",["63"],"import React, { useContext, useEffect, useState } from 'react'\r\nimport { UserContext } from '../contexts/UserContext'\r\nimport FetchKit from '../data/fetchKit'\r\n\r\nexport default function LoginPage() {\r\n    const [ formData, setFormData ] = useState({\r\n        email: \"Dino.Pacariz@yh.nackademin.se\",\r\n        password: \"javascriptoramverk\"\r\n    })\r\n    const [ loginStatus , setLoginStatus ] = useState({\r\n        successful: true\r\n    })\r\n    const { loggedIn, setLoggedIn, history, setUserInfo } = useContext(UserContext)\r\n\r\n    function handleOnSubmit(e) {\r\n        e.preventDefault()\r\n        const payload = {\r\n            email: formData.email,\r\n            password: formData.password\r\n        }\r\n        \r\n        FetchKit.login(payload)\r\n        .then(data => {\r\n            if (data) {\r\n                localStorage.setItem(\"token\", data.token)\r\n                setLoggedIn(true)\r\n                getUserInfo()\r\n            }\r\n            else {\r\n                setLoginStatus({successful: false})\r\n            }\r\n        })\r\n    }\r\n    \r\n    function getUserInfo() {\r\n        FetchKit.getCurrentUserInfo()\r\n        .then(data => {\r\n            if (data) {\r\n                setLoggedIn(true)\r\n                setUserInfo(data)\r\n            }\r\n        })\r\n    }\r\n\r\n    useEffect(() => {\r\n        if(loggedIn) {\r\n            history.push('/home')\r\n        }\r\n    }, [loggedIn])\r\n\r\n    function handleOnChange(e) {\r\n        setFormData({...formData, [e.target.name]: e.target.value})\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <form onSubmit={handleOnSubmit}>\r\n                <label>Email</label>\r\n                <input name=\"email\" onChange={handleOnChange} />\r\n                <label>Password</label>\r\n                <input name=\"password\" onChange={handleOnChange} />\r\n                <button type=\"submit\">Log in</button>\r\n                {loginStatus.successful === false &&\r\n                    <p>Login failed, please enter a valid Email {\"&\"} Password </p>\r\n                }\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n","C:\\Users\\dinop\\Documents\\GitHub\\react-inlamningsuppgift\\src\\components\\CustomerListItem.jsx",[],"C:\\Users\\dinop\\Documents\\GitHub\\react-inlamningsuppgift\\src\\pages\\CustomerDetailPage.jsx",["64"],"import React, { useContext, useEffect, useState } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { UserContext } from '../contexts/UserContext'\r\nimport FetchKit from '../data/fetchKit'\r\n\r\nexport default function CustomerDetailPage(props) {\r\n    const customerId = props.match.params.id\r\n    const [ customerItem, setCustomerItem ] = useState(null)\r\n    const [ itemExists, setItemExists] = useState(true)\r\n    const { history , setListUpToDate } = useContext(UserContext)\r\n\r\n    function getCustomerItem() {\r\n        FetchKit.getCustomerItem(customerId)\r\n        .then(data => {\r\n            if(data) {\r\n                setCustomerItem(data)\r\n            }\r\n            else {\r\n                setItemExists(false)\r\n            }\r\n        })\r\n    }\r\n\r\n    function deleteCustomer() {\r\n        setListUpToDate(false)\r\n        FetchKit.deleteCustomerItem(customerId)\r\n        .then(() => history.push('/home'))\r\n    }\r\n\r\n    useEffect(() => {\r\n        getCustomerItem()\r\n    }, [])\r\n    \r\n    return (\r\n        <div>\r\n            {!itemExists && (\r\n            <>\r\n                <p>This customer doesn't exist.</p>\r\n                <Link to={\"/home\"}>Go back.</Link>\r\n            </>\r\n            )}\r\n            {customerItem\r\n                ?(\r\n                    <div>\r\n                        <h1>{customerItem.name}</h1>\r\n                        <table>\r\n                            <tbody>\r\n                                <tr>\r\n                                    <td>Organisation Number</td>\r\n                                    <td>{customerItem.organisationNr}</td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td>Payment Term</td>\r\n                                    <td>{customerItem.paymentTerm}</td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td>Phone Number</td>\r\n                                    <td>{customerItem.phoneNumber}</td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td>Reference</td>\r\n                                    <td>{customerItem.reference}</td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td>VAT Number</td>\r\n                                    <td>{customerItem.vatNr}</td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td>Email</td>\r\n                                    <td>\r\n                                        <a href={`mailto:${customerItem.email}`}>\r\n                                            {customerItem.email}\r\n                                        </a>\r\n                                    </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td>Website</td>\r\n                                    <td>\r\n                                        <a href={customerItem.website} target=\"_blank\" rel=\"noreferrer\">\r\n                                            {customerItem.website}\r\n                                        </a>\r\n                                    </td>\r\n                                </tr>\r\n                                \r\n                            </tbody>\r\n                        </table>\r\n                        <button onClick={deleteCustomer}>Delete Customer</button>\r\n                        <Link to={`/customers/${customerId}/edit`}>\r\n                            <button>\r\n                                    Update Customer\r\n                            </button>\r\n                        </Link>\r\n                    </div>\r\n                )\r\n                :(\r\n                    <>{itemExists && <span>Loading Data...</span>}</>\r\n                )       \r\n            }\r\n        </div>\r\n    )\r\n}\r\n","C:\\Users\\dinop\\Documents\\GitHub\\react-inlamningsuppgift\\src\\pages\\CustomerCreatePage.jsx",[],"C:\\Users\\dinop\\Documents\\GitHub\\react-inlamningsuppgift\\src\\pages\\CustomerUpdatePage.jsx",["65"],"import React, { useContext, useEffect, useState } from 'react'\r\nimport { UserContext } from '../contexts/UserContext'\r\nimport FetchKit from '../data/fetchKit'\r\n\r\nexport default function CustomerUpdatePage(props) {\r\n    const customerId = props.match.params.id\r\n    const [ formData, setFormData ] = useState({})\r\n    const { history , setListUpToDate } = useContext(UserContext)\r\n    \r\n    function getCustomerItem() {\r\n        FetchKit.getCustomerItem(customerId)\r\n        .then(data => setFormData(data))\r\n    }\r\n\r\n    useEffect(() => {\r\n        getCustomerItem()\r\n    }, [])\r\n\r\n    function renderInput(name, label, type) {\r\n        return (\r\n            <div>\r\n                <label>{label}</label>\r\n                <input\r\n                    type={type || \"text\"}\r\n                    name={name}\r\n                    value={formData[name] || \"\"}\r\n                    onChange={handleOnChange}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n\r\n    function handleOnChange(e) {\r\n        setFormData({...formData, [e.target.name]: e.target.value})\r\n    }\r\n\r\n    function handleOnSubmit(e) {\r\n        e.preventDefault()\r\n        setListUpToDate(false)\r\n        FetchKit.updateCustomerItem(customerId, formData)\r\n        .then(() => history.push(`/customers/${customerId}`))\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1>Update Customer</h1>\r\n            <form onSubmit={handleOnSubmit}>\r\n                {renderInput(\"name\", \"Customer Name\")}\r\n                {renderInput(\"email\", \"Customer Email\", \"email\")}\r\n                {renderInput(\"organisationNr\", \"Organisation Number\")}\r\n                {renderInput(\"paymentTerm\", \"Payment Term\", \"number\")}\r\n                {renderInput(\"phoneNumber\", \"Phone Number\", \"tel\")}\r\n                {renderInput(\"reference\", \"Reference\")}\r\n                {renderInput(\"vatNr\", \"VAT Number\")}\r\n                {renderInput(\"website\", \"Website\", \"url\")}\r\n                <button type=\"submit\">Update Customer</button>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n","C:\\Users\\dinop\\Documents\\GitHub\\react-inlamningsuppgift\\src\\pages\\HomePage.jsx",["66"],"import React, { useContext, useEffect } from 'react'\r\nimport CustomerListItem from '../components/CustomerListItem'\r\nimport { UserContext } from '../contexts/UserContext'\r\nimport FetchKit from '../data/fetchKit'\r\n\r\nexport default function HomePage() {\r\n    const { customerList, setCustomerList, listUpToDate, setListUpToDate } = useContext(UserContext)\r\n    \r\n    useEffect(() => {\r\n        if (!listUpToDate) {\r\n            getCustomerList()\r\n        }\r\n    }, [])\r\n\r\n    function getCustomerList() {\r\n        FetchKit.getCustomerList()\r\n        .then(data => {\r\n            if (data) {\r\n                setCustomerList(data.results)\r\n                setListUpToDate(true)\r\n            }\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {listUpToDate\r\n                ?(\r\n                    customerList.map((item, index) => {\r\n                        return <CustomerListItem key={item.id} customerData={item} />\r\n                    })\r\n                )\r\n                :(\r\n                    <p>Loading...</p>\r\n                )\r\n            }\r\n        </div>\r\n    )\r\n}\r\n","C:\\Users\\dinop\\Documents\\GitHub\\react-inlamningsuppgift\\src\\contexts\\UserContext.js",[],"C:\\Users\\dinop\\Documents\\GitHub\\react-inlamningsuppgift\\src\\data\\FetchKit.js",["67"],"C:\\Users\\dinop\\Documents\\GitHub\\react-inlamningsuppgift\\src\\data\\fetchKit.js",[],"C:\\Users\\dinop\\Documents\\GitHub\\react-inlamningsuppgift\\src\\pages\\ProfilePage.jsx",[],{"ruleId":"68","replacedBy":"69"},{"ruleId":"70","replacedBy":"71"},{"ruleId":"72","severity":1,"message":"73","line":23,"column":35,"nodeType":"74","messageId":"75","endLine":23,"endColumn":37},{"ruleId":"76","severity":1,"message":"77","line":32,"column":6,"nodeType":"78","endLine":32,"endColumn":8,"suggestions":"79"},{"ruleId":"76","severity":1,"message":"77","line":49,"column":8,"nodeType":"78","endLine":49,"endColumn":18,"suggestions":"80"},{"ruleId":"76","severity":1,"message":"81","line":32,"column":8,"nodeType":"78","endLine":32,"endColumn":10,"suggestions":"82"},{"ruleId":"76","severity":1,"message":"81","line":17,"column":8,"nodeType":"78","endLine":17,"endColumn":10,"suggestions":"83"},{"ruleId":"76","severity":1,"message":"84","line":13,"column":8,"nodeType":"78","endLine":13,"endColumn":10,"suggestions":"85"},{"ruleId":"86","severity":2,"message":"87","line":39,"column":40,"nodeType":"88","messageId":"89","endLine":39,"endColumn":50},"no-native-reassign",["90"],"no-negated-in-lhs",["91"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.","ArrayExpression",["92"],["93"],"React Hook useEffect has a missing dependency: 'getCustomerItem'. Either include it or remove the dependency array.",["94"],["95"],"React Hook useEffect has missing dependencies: 'getCustomerList' and 'listUpToDate'. Either include them or remove the dependency array.",["96"],"no-undef","'customerId' is not defined.","Identifier","undef","no-global-assign","no-unsafe-negation",{"desc":"97","fix":"98"},{"desc":"99","fix":"100"},{"desc":"101","fix":"102"},{"desc":"101","fix":"103"},{"desc":"104","fix":"105"},"Update the dependencies array to be: [history]",{"range":"106","text":"107"},"Update the dependencies array to be: [history, loggedIn]",{"range":"108","text":"109"},"Update the dependencies array to be: [getCustomerItem]",{"range":"110","text":"111"},{"range":"112","text":"111"},"Update the dependencies array to be: [getCustomerList, listUpToDate]",{"range":"113","text":"114"},[1099,1101],"[history]",[1374,1384],"[history, loggedIn]",[991,993],"[getCustomerItem]",[574,576],[463,465],"[getCustomerList, listUpToDate]"]